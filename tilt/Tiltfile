
config.define_string('build')
config.define_string('rider')
config.define_string_list("args", args=True)
cfg = config.parse()
config.set_enabled_resources(cfg.get('args', []))
buildcfg = cfg.get('build')
riderver = cfg.get('rider', '')
print(buildcfg)
os.putenv('entryhttpurl', 'http://localhost:8080')
os.putenv('buildconfig', buildcfg)
os.putenv('riderver', riderver)
os.putenv('mssqlserver', 'mssql-0.mssql-headless.db,1433')
os.putenv('mssqluser', 'sa')
mssqlpassword = 'Password1.'
os.putenv('mssqlpassword', mssqlpassword)
os.putenv('MSSQL_SA_PASSWORD', mssqlpassword)

secret_settings(True) 

k8s_yaml('elk/crds.yaml')
k8s_yaml('elk/operator.yaml')
k8s_yaml('elk/elasticsearch.yaml')
k8s_yaml('elk/kibana.yaml')
k8s_yaml('elk/filebeat.yaml')
k8s_yaml('elk/logstash.yaml')

# docker_compose('./otel/docker-compose.yaml')

k8s_yaml(kustomize('.'))

docker_build(
    'rabbitmq-local',
    '.',
    dockerfile='Dockerfile.rabbitmq',
    only=['Dockerfile.rabbitmq']
)

k8s_yaml('rabbitmq.yaml')

local_resource('tf init', 'cd terraform && terraform init', deps=['terraform'], resource_deps=['rabbitmq'], ignore=['terraform/*.tfstate', 'terraform/*.tfstate.*', 'terraform/.terraform/', 'terraform/.terraform.*'], labels=['tf'])

local_resource('tf plan', 'cd terraform && terraform plan', deps=['terraform'], resource_deps=['tf init'], ignore=['terraform/*.tfstate', 'terraform/*.tfstate.*', 'terraform/.terraform/', 'terraform/.terraform.*'], labels=['tf'])

local_resource('tf apply', 'cd terraform && terraform apply -auto-approve', resource_deps=['tf plan'], deps=['terraform'], ignore=['terraform/*.tfstate', 'terraform/*.tfstate.*', 'terraform/.terraform/', 'terraform/.terraform.*'], labels=['tf'])

include('../backend/Tiltfile')
include('../backend2/Tiltfile')
include('../frontend/Tiltfile')