
config.define_string('build')
config.define_string('rider')
config.define_string_list("to-run", args=True)
cfg = config.parse()
print(cfg)
groups = {
  'app': ['hello-tilt-front', 'hello-tilt-back1', 'hello-tilt-back2'],
  'elk': ['filebeat'],
  'otel': [],
  'kafka': []
}
resources = []
groups_to_run = cfg.get('to-run', [])
for arg in groups_to_run:
  if arg in groups:
    resources += groups[arg]
  else:
    resources.append(arg)

resources.append('elk')
resources.append('otel')
resources.append('kafka')

config.set_enabled_resources(resources)
buildcfg = cfg.get('build')
riderver = cfg.get('rider', '')
print(buildcfg)
os.putenv('entryhttpurl', 'http://localhost:8080')
os.putenv('buildconfig', buildcfg)
os.putenv('riderver', riderver)
os.putenv('mssqlserver', 'mssql-0.mssql-headless.db,1433')
os.putenv('mssqluser', 'sa')
mssqlpassword = 'Password1.'
os.putenv('mssqlpassword', mssqlpassword)
os.putenv('MSSQL_SA_PASSWORD', mssqlpassword)

secret_settings(True) 

k8s_yaml('elk/filebeat.yaml')

if 'kafka' in groups_to_run:
    os.putenv('kafka', "true")
    local_resource('kafka', serve_cmd='cd kafka && docker compose up', labels=['kafka'])
else:
    os.putenv('kafka', "false")
    local_resource('kafka', 'cd kafka && docker compose down', labels=['kafka'])
if 'elk' in groups_to_run:
    os.putenv('elk', "true")
    local_resource('elk', serve_cmd='cd elk && docker compose up', labels=['elk'])
else:
    os.putenv('elk', "false")
    local_resource('elk', 'cd elk && docker compose down', labels=['elk'])

if 'otel' in groups_to_run:
    os.putenv('otel', "true")
    local_resource('otel', serve_cmd='cd otel && docker compose up', labels=['otel'])
else:
    os.putenv('otel', "false")
    local_resource('otel', 'cd otel && docker compose down', labels=['otel'])

k8s_yaml(kustomize('.'))

docker_build(
    'rabbitmq-local',
    '.',
    dockerfile='Dockerfile.rabbitmq',
    only=['Dockerfile.rabbitmq']
)

k8s_yaml('rabbitmq.yaml')

local_resource('tf init', 'cd terraform && terraform init', deps=['terraform'], resource_deps=['rabbitmq'], ignore=['terraform/*.tfstate', 'terraform/*.tfstate.*', 'terraform/.terraform/', 'terraform/.terraform.*'], labels=['tf'])

local_resource('tf plan', 'cd terraform && terraform plan', deps=['terraform'], resource_deps=['tf init'], ignore=['terraform/*.tfstate', 'terraform/*.tfstate.*', 'terraform/.terraform/', 'terraform/.terraform.*'], labels=['tf'])

local_resource('tf apply', 'cd terraform && terraform apply -auto-approve', resource_deps=['tf plan'], deps=['terraform'], ignore=['terraform/*.tfstate', 'terraform/*.tfstate.*', 'terraform/.terraform/', 'terraform/.terraform.*'], labels=['tf'])

include('../backend/Tiltfile')
include('../backend2/Tiltfile')
include('../frontend/Tiltfile')